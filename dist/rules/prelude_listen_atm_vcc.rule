/*
*  Linux-2.6.x kernel 'net/atm/proc.c' Local Denial of Service Vulnerability
*  CVE-2008-5079
*/
/
#define MAX_CALLS 2
#define SYSCALL 102


rule prelude_listen_atm_vcc
{
  state init
  {
    expect (.auditd.syscall == SYSCALL &&
	    .auditd.varzero == "4" &&
            .prelude.classification_text == "Local Denial of Service Vulnerability" &&
            .prelude.assessment_completion == "failed")
      goto start;
  }

  state start
  {

    $counter = 1 ;
    $attack_pid = .auditd.pid;

    expect (.auditd.pid == $attack_pid &&
	    .auditd.syscall == SYSCALL &&
	    .auditd.varzero == "4")
      goto listen_loop;
  }

  state listen_loop
  {
    print($counter);
    $counter = $counter + 1;

    expect ($counter == MAX_CALLS)
      goto alert;

    expect ( .auditd.pid == $attack_pid &&
	     .auditd.syscall == SYSCALL &&
	     .auditd.varzero == "4" &&
	     $counter < MAX_CALLS)
      goto listen_loop;
  }


  state alert
  {
    $source = str_from_int(.auditd.pid);
    $message = " Linux kernel double-listen Local Denial of Service detected !!!";
    print($message);
    $reaction = "kill -9 " + str_from_int( $attack_pid ) ;
    system( $reaction );
    $msg= "Orchids is reacting :killing attack process !! ";

    $idmef = idmef_message_new();
    idmef_message_set($idmef, "alert.assessment.impact.description", $message);
    idmef_message_set($idmef, "alert.assessment.impact.severity", "high");
    idmef_message_set($idmef, "alert.assessment.impact.completion", "succeeded");
    idmef_message_set($idmef, "alert.assessment.impact.type", "user");
    idmef_message_set($idmef, "alert.classification.text", "Local Denial of Service");
    idmef_message_set($idmef, "alert.source(0).node.address(0).address", $source);
    idmef_message_set($idmef, "alert.target(0).user.userid(0).name", "root");
    //additional data /$reaction /$msg
    idmef_message_send($idmef);
  }

}/* end rule listen_atm_vcc*/
