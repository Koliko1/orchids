/*

  Clear password (local) interception.

*/



rule prelude_password_sniff
{

  state init {
    expect (.promisc.action == "enter")
      goto promisc;
  }

  state promisc {
    $interface = .promisc.interface;
    .prelude.classification_text == "Password sniffing";
    .prelude.assessment_completion == "failed";

    expect (.promisc.action == "left" && .promisc.interface == $interface)
      goto normal_end;

    expect (.xinetd.action == "START" && .xinetd.service == "telnet")
      goto telnet;
  }

  state telnet {
    $message = "warning, telnet while someone is sniffing";

    $idmef = idmef_message_new();
    idmef_message_set($idmef, "alert.assessment.impact.description", $message);
    idmef_message_set($idmef, "alert.assessment.impact.severity", "medium");
    idmef_message_set($idmef, "alert.assessment.impact.completion", "succeeded");
    idmef_message_set($idmef, "alert.assessment.impact.type", "user");
    idmef_message_set($idmef, "alert.classification.text", "Password sniffing");
    idmef_message_set($idmef, "alert.source(0).node.address(0).address", "address");
    idmef_message_set($idmef, "alert.target(0).node.address(0).address", "root");
    idmef_message_set($idmef, "alert.target(0).service.name", "telnet");
    idmef_message_send($idmef);
  }

  state normal_end {
    kill_threads();
  }

}
