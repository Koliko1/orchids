/*
*   Memory leak vulnerability in ip_options_get
*   Systems affected: linux kernel 2.6 <= 2.6.9, 2.4 <= 2.4.28 on i386 (at least)
*   http://www.guninski.com/where_do_you_want_billg_to_go_today_2.html
*/


#define MAX_CALLS 5
#define SYSCALL 102


rule prelude_leak_memory
{
  state init
  {
    expect (.auditd.syscall == SYSCALL &&
	    .auditd.varzero == "3")
      goto start;
  }

  state start
  {
   $counter = 1 ;
   $attack_pid = .auditd.pid;
   .prelude.classification_text == "Memory leak";
   .prelude.assessment_completion == "failed";

   expect (.auditd.pid == $attack_pid &&
       .auditd.syscall == SYSCALL &&
       .auditd.varzero == "3" &&
       goto listen_loop;
  }

  state listen_loop
  {
    $counter = $counter + 1;
    expect ($counter == MAX_CALLS)
       goto alert;

    expect ( .auditd.pid == $attack_pid &&
         .auditd.syscall == SYSCALL &&
         .auditd.varzero == "3" &&
         $counter < MAX_CALLS)
       goto listen_loop;
  }


  state alert
  {
    $message = "Memory leak DOS attack detected !!";
    print($message);
    $reaction = "kill -9 " + str_from_int( $attack_pid ) ;
    system( $reaction );
    $msg= " --> Orchids is reacting : killing attack process !!";
    print($msg);
    print( $reaction );
    $attacker = str_from_int(.auditd.pid);

    $idmef = idmef_message_new();
    idmef_message_set($idmef, "alert.assessment.impact.description", $message);
    idmef_message_set($idmef, "alert.assessment.impact.severity", high);
    idmef_message_set($idmef, "alert.assessment.impact.completion", "failed");
    idmef_message_set($idmef, "alert.assessment.impact.type", "user");
    idmef_message_set($idmef, "alert.classification.text", "Memory leak");
    idmef_message_set($idmef, "alert.source(0).node.address(0).address", $attacker);
    idmef_message_set($idmef, "alert.target(0).node.address(0).address", "root");
    //additionnal data $reaction / $msg
    idmef_message_send($idmef);
    report();
  }

}/* end rule leak_memory*/
